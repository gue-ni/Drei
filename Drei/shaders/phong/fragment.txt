#version 330 core
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  

uniform vec3 viewPos; 
uniform vec3 objectColor;

uniform vec3 pointLightPos; 
uniform vec3 pointLightColor;

uniform vec3 dirLightColor;
uniform vec3 dirLightDir;

uniform float ka;
uniform float ks;
uniform float kd;
uniform int alpha;

//float ka = 0.1;
//float ks = 0.9;
//float kd = 0.3;
//int alpha = 10;

vec3 light(vec3 color, vec3 dir){
	// ambient   	
    	vec3 ambient = ka * color;
	
    	// diffuse 
    	vec3 norm = normalize(Normal);
    	vec3 diffuse = kd * max(dot(norm, dir), 0.0) * color;
    
    	// specular    	
    	vec3 viewDir = normalize(viewPos - FragPos);
    	vec3 reflectDir = reflect(-dir, norm);  
    	vec3 specular = ks * pow(max(dot(viewDir, reflectDir), 0.0), alpha) * color;

	return ambient + diffuse + specular;
}

void main()
{
    float constant = 1; 
    float linear = 0.4;
    float quadratic = 0.1;
    float d = length(pointLightPos - FragPos);
    float attenuation = constant + d * linear + d * d * quadratic;

    vec3 pnt = light(pointLightColor, normalize(pointLightPos - FragPos));
    pnt *= attenuation;

    vec3 dir = light(dirLightColor, normalize(-dirLightDir));
        
    vec3 result = (pnt + dir) * objectColor;
    FragColor = vec4(result, 1.0);
} 